/* for testing flatten (transform)
   import ParseTree;
   import Syntax;
   l = //copy source location//;
   pt = parse(#start[Form], l);
   import CST2AST;
   ast = cst2ast(pt);   
   import Transform;
   tr = flatten(ast);
*/

/* for testing rename (transform)
   import ParseTree;
   import Syntax;
   l = //copy source location//;
   pt = parse(#start[Form], l);
   import CST2AST;
   ast = cst2ast(pt);
   import Resolve;
   graph = resolve(ast); 
   loc varloc = //copy from the graph//;  e.g |project://QL/examples/tax.myql|(183,57,<11,2>,<12,25>)
   import Transform;
   re = rename(pt, varloc, "newName". graph[2]);
*/

/* for testing check
   import ParseTree;
   import Syntax;
   l = //copy source location//;
   pt = parse(#start[Form], l);
   import CST2AST;
   ast = cst2ast(pt);
   import Resolve;
   graph = resolve(ast);
   import Check;
   tenv = collect(ast);
   check(ast, tenv, graph[2]);
*/

/* for testing eval
   import ParseTree;
   import Syntax;
   l = //copy source location//;
   pt = parse(#start[Form], l);
   import CST2AST;
   ast = cst2ast(pt);
   import Eval;
   venv0 = intialEnv(ast);
   inp1 = input("sellingPrice", vint(30));
   venv1 = eval(ast, inp1, venv0);
   inp2 = input("hasMaintLoan", vbool(true));
   venv2 = eval(ast, inp2, venv1);
*/

/* for testing resolve
   import ParseTree;
   import Syntax;
   l = //copy source location//;
   pt = parse(#start[Form], l);
   import CST2AST; 
   ast = cst2ast(pt);
   import Resolve;
   graph = resolve(ast);
*/

/* for testing compile
   import ParseTree;
   import Syntax;
   l = //copy source location//;
   pt = parse(#start[Form], l);
   import CST2AST;
   ast = cst2ast(pt);
   import Compile;
   compile(ast);
*/
